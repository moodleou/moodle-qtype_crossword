{"version":3,"file":"crossword_clue.min.js","sources":["../src/crossword_clue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Crossword clue class, handle any action relative to clue.\n *\n * @module qtype_crossword/crossword_clue\n * @copyright 2022 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {CrosswordQuestion} from 'qtype_crossword/crossword_question';\n\nexport class CrosswordClue extends CrosswordQuestion {\n\n    /**\n     * Constructor.\n     *\n     * @param {Object} options The settings for crossword.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n     * Set up for clue section.\n     */\n    setUpClue() {\n        let {words, readonly} = this.options;\n        const clueEls = this.options.crosswordEl\n            .closest('.qtype_crossword-grid-wrapper')\n            .querySelectorAll('.contain-clue .wrap-clue');\n        clueEls.forEach(el => {\n            const questionId = el.getAttribute('data-questionid');\n            let word = words.find(o => o.number === parseInt(questionId));\n            if (word) {\n                const inputEl = el.querySelector('input');\n                inputEl.value += this.makeUnderscore(word.length - inputEl.value.length);\n                if (!readonly) {\n                    inputEl.disabled = false;\n                }\n                // Add event for input.\n                this.addEventForClueInput(inputEl, word);\n            }\n        });\n    }\n\n    /**\n     * Add event to word input element.\n     *\n     * @param {Element} el The input element.\n     * @param {String} word The word data.\n     */\n    addEventForClueInput(el, word) {\n        const {readonly} = this.options;\n        if (readonly) {\n            return;\n        }\n        el.addEventListener('click', (e) => {\n            let startIndex = e.target.selectionStart;\n            if (startIndex >= word.length) {\n                startIndex = word.length - 1;\n            }\n            this.focusCellByStartIndex(startIndex, word);\n            this.focusClue();\n            this.setStickyClue();\n        });\n\n        el.addEventListener('focus', (e) => {\n            e.target.dispatchEvent(new Event('click'));\n        });\n\n        el.addEventListener('keypress', (e) => {\n            e.preventDefault();\n            const {words, wordNumber} = this.options;\n            const word = words.find(o => o.number === parseInt(wordNumber));\n            let {key, target} = e;\n            let startIndex = target.selectionStart;\n            key = this.replaceText(key);\n            if (key === '') {\n                return;\n            }\n            const gelEl = this.options.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${startIndex}']`);\n            if (gelEl) {\n                gelEl.querySelector('text.crossword-cell-text').innerHTML = key.toUpperCase();\n                this.bindDataToClueInput(gelEl, key.toUpperCase());\n            }\n            // Go to next letter.\n            startIndex++;\n            const nexEl = this.options.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${startIndex}']`);\n            if (nexEl) {\n                this.toggleHighlight(word, nexEl);\n                target.setSelectionRange(startIndex, startIndex);\n            }\n        });\n\n        el.addEventListener('keyup', (event) => {\n            event.preventDefault();\n            const {words, wordNumber} = this.options;\n            const {key, target} = event;\n            let {value} = target;\n            if ([this.ARROW_LEFT, this.ARROW_RIGHT].includes(key)) {\n                const startIndex = target.selectionStart;\n                const gEl = this.options.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${startIndex}']`);\n                if (gEl) {\n                    this.toggleHighlight(word, gEl);\n                }\n            }\n            if (key === this.DELETE || key === this.BACKSPACE) {\n                const word = words.find(o => o.number === parseInt(wordNumber));\n                let startIndex = target.selectionStart;\n                if (!word) {\n                    return;\n                }\n                value = value + this.makeUnderscore(word.length - value.length);\n                target.value = value;\n                this.syncLettersByText(value);\n                this.syncFocusCellAndInput(target, startIndex);\n            }\n\n            if (key === this.END || key === this.HOME) {\n                let startIndex = 0;\n                const word = words.find(o => o.number === parseInt(wordNumber));\n                if (!word) {\n                    return;\n                }\n                if (key === this.END) {\n                    startIndex = word.length - 1;\n                }\n                this.syncFocusCellAndInput(target, startIndex);\n            }\n        });\n\n        el.addEventListener('paste', (event) => {\n            event.preventDefault();\n            let value = (event.clipboardData || window.clipboardData).getData('text');\n            value = this.replaceText(value);\n            this.syncLettersByText(value);\n        });\n\n        el.addEventListener('keydown', (e) => {\n            if (e.ctrlKey && e.key.toLowerCase() === this.Z_KEY) {\n                e.preventDefault();\n            }\n            if (e.key === this.ENTER) {\n                e.preventDefault();\n            }\n        });\n\n        el.addEventListener('cut', (event) => {\n            const selectString = document.getSelection().toString();\n            const startIndex = event.target.selectionStart;\n            let {value} = event.target;\n            value = value.substring(0, startIndex) +\n                value.substring(startIndex + selectString.length) +\n                this.makeUnderscore(selectString.length);\n            event.target.value = value;\n            event.clipboardData.setData('text/plain', selectString);\n            event.preventDefault();\n            event.target.setSelectionRange(startIndex, startIndex);\n            this.syncLettersByText(value);\n        });\n    }\n\n    /**\n     * Focus cell base on the start index.\n     *\n     * @param {Element} startIndex The start index.\n     * @param {String} word The word data.\n     */\n    focusCellByStartIndex(startIndex, word) {\n        let position = this.calculatePosition(word, startIndex);\n        const rect = this.options.crosswordEl.querySelector(`g rect[x='${position.x}'][y='${position.y}']`);\n        if (rect) {\n            this.options.wordNumber = word.number;\n            this.toggleHighlight(word, rect.closest('g'));\n            this.updateLetterIndexForCells(word);\n        }\n    }\n\n    /**\n     * Focus crossword cell from the start index.\n     *\n     * @param {Element} target The element.\n     * @param {Number} startIndex The start index.\n     */\n    syncFocusCellAndInput(target, startIndex) {\n        const {wordNumber} = this.options;\n        const gEl = this.options.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${startIndex}']`);\n        target.setSelectionRange(startIndex, startIndex);\n        if (gEl) {\n            this.toggleFocus(gEl);\n        }\n    }\n\n    /**\n     * Toggle the focus cell.\n     *\n     * @param {Element} gEl The word letter.\n     */\n    toggleFocus(gEl) {\n        const focused = this.options.crosswordEl.querySelector('g rect.crossword-cell-focussed');\n        if (focused) {\n            focused.classList.remove('crossword-cell-focussed');\n            focused.classList.add('crossword-cell-highlighted');\n        }\n        gEl.querySelector('rect').classList.add('crossword-cell-focussed');\n    }\n}\n"],"names":["CrosswordClue","CrosswordQuestion","constructor","options","setUpClue","words","readonly","this","crosswordEl","closest","querySelectorAll","forEach","el","questionId","getAttribute","word","find","o","number","parseInt","inputEl","querySelector","value","makeUnderscore","length","disabled","addEventForClueInput","addEventListener","e","startIndex","target","selectionStart","focusCellByStartIndex","focusClue","setStickyClue","dispatchEvent","Event","preventDefault","wordNumber","key","replaceText","gelEl","innerHTML","toUpperCase","bindDataToClueInput","nexEl","toggleHighlight","setSelectionRange","event","ARROW_LEFT","ARROW_RIGHT","includes","gEl","DELETE","BACKSPACE","syncLettersByText","syncFocusCellAndInput","END","HOME","clipboardData","window","getData","ctrlKey","toLowerCase","Z_KEY","ENTER","selectString","document","getSelection","toString","substring","setData","position","calculatePosition","rect","x","y","updateLetterIndexForCells","toggleFocus","focused","classList","remove","add"],"mappings":"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"}